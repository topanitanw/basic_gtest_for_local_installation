# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_ROOT = $(shell git rev-parse --show-toplevel)/tools/googletest/googletest
GTEST_HOME = $(GTEST_ROOT)
GTEST_DIR = $(GTEST_HOME)
GTEST_SRC = $(GTEST_HOME)/src
GTEST_INCLUDE = $(GTEST_HOME)/include
GTEST_LIBS = $(GTEST_HOME)/lib

# Where to find user code.
USER_DIR = .
USER_HEADERS = .

TEST_COV_FLAGS = -fprofile-arcs -ftest-coverage

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Linux)
CPPFLAGS += -isystem $(GTEST_INCLUDE)
LFLAGS = -lgcov --coverage
endif

ifeq ($(UNAME_S),Darwin)
CPPFLAGS += -I$(GTEST_INCLUDE)
LFLAGS = --coverage
endif

# Flags passed to the C++ compiler.
# Gtest requires the C++11-standard compliant compiler
CXXFLAGS += -g -Wall -Wextra -pthread -std=c++11 -O0

COV_FLAGS = -fprofile-arcs -ftest-coverage


# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_INCLUDE)/*.h \
                $(GTEST_INCLUDE)/internal/*.h

# House-keeping build targets.
.PHONY: all
all : $(TESTS) test.gcda cov

.PHONY: clean
clean :
	rm -f $(TESTS) *.o gtest*.a result.* test.gc* test.info
	rm -rf result

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h # $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -stdlib=libc++ -U__STRICT_ANSI__ -DGTEST_USE_OWN_TR1_TUPLE=1 -c $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -stdlib=libc++ -U__STRICT_ANSI__ -DGTEST_USE_OWN_TR1_TUPLE=1 -c $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

############################################################
# test_counter
############################################################
test.o : test.cpp
<<<<<<< HEAD:test_glocal/makefile
	$(CXX) $(CPPFLAGS) -I$(USER_HEADERS) -I$(GTEST_INCLUDE) $(CXXFLAGS) \
		$(COV_FLAGS) -c $< -o $@
=======
	$(CXX) $(CPPFLAGS) -I$(USER_HEADERS) -I$(GTEST_INCLUDE) $(CXXFLAGS) $(COV_FLAGS) -c $<
>>>>>>> f21af55efe8d33b856c5300fa515183c13d7c54c:test/makefile

test : test.o gtest.a gtest_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $(CXXFLAGS) $^ -o $@ $(LFLAGS)

<<<<<<< HEAD:test_glocal/makefile
test.gcda:
	./test

.PHONY: cov
cov: test.gcda
	lcov -d . -t test -o test.info -b . -c
	genhtml -o result test.info
	gcovr --html -o result.html
	gcovr -o result.txt
=======
# needs to use the binary in the tools/lcov/bin
cov:
	lcov -d . -t test -o test.info -b . -c
	genhtml -o result test.info
.PHONY: all clean cov
>>>>>>> f21af55efe8d33b856c5300fa515183c13d7c54c:test/makefile
